generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  color     String     @default("#3B82F6")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  playlists Playlist[]

  @@index([slug])
}

model Playlist {
  id                String                 @id @default(cuid())
  title             String
  description       String?
  mode              PlaylistMode           @default(CUSTOM)
  thumbnail         String?
  coverImageUrl     String?
  youtubePlaylistId String?                @unique
  autoSync          Boolean                @default(false)
  lastSyncedAt      DateTime?
  slug              String                 @unique
  tags              String[]
  difficulty        Difficulty?
  visibility        Visibility             @default(PUBLIC)
  shareableLink     String?                @unique
  qrCodeUrl         String?
  embedCode         String?
  userId            String
  categoryId        String?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  category          Category?              @relation(fields: [categoryId], references: [id])
  collaborators     PlaylistCollaborator[]
  videos            Video[]

  @@index([userId])
  @@index([slug])
  @@index([categoryId])
  @@index([visibility])
  @@index([youtubePlaylistId])
  @@index([tags])
  @@index([difficulty])
}

model PlaylistCollaborator {
  id         String           @id @default(cuid())
  playlistId String
  userId     String
  role       CollaboratorRole @default(VIEWER)
  createdAt  DateTime         @default(now())
  playlist   Playlist         @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@unique([playlistId, userId])
  @@index([userId])
  @@index([playlistId])
}

model Video {
  id          String              @id @default(cuid())
  title       String
  description String?
  thumbnail   String?
  url         String
  youtubeId   String?
  provider    VideoProvider       @default(YOUTUBE)
  duration    Int?
  position    Int                 @default(0)
  dueDate     DateTime?
  notes       String?
  playlistId  String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  progress    UserVideoProgress[]
  playlist    Playlist            @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@index([playlistId])
  @@index([youtubeId])
  @@index([position])
}

model UserVideoProgress {
  id              String    @id @default(cuid())
  userId          String
  videoId         String
  completed       Boolean   @default(false)
  completedAt     DateTime?
  lastWatchedAt   DateTime  @default(now())
  watchedDuration Int       @default(0)
  progressPercent Int       @default(0)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  video           Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
  @@index([completed])
}

enum PlaylistMode {
  YOUTUBE_IMPORT
  CUSTOM
}

enum Visibility {
  PUBLIC
  UNLISTED
  PRIVATE
}

enum Difficulty {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum CollaboratorRole {
  VIEWER
  EDITOR
  ADMIN
}

enum VideoProvider {
  YOUTUBE
  VIMEO
  DIRECT
}
