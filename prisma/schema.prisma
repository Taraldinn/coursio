// Prisma Schema for Coursio - YouTube Course Tracker
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String    @unique
  email         String    @unique
  password      String?   // null for OAuth-only users
  emailVerified DateTime?
  image         String?
  
  // OAuth
  accounts      Account[]
  sessions      Session[]
  
  // App data
  playlists            Playlist[]
  progress             UserVideoProgress[]
  notes                Note[]
  passwordResetTokens  PasswordResetToken[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([email])
  @@index([username])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model PasswordResetToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([token])
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  slug      String     @unique
  color     String     @default("#3B82F6")
  playlists Playlist[]
  
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  
  @@index([slug])
}

model Playlist {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  thumbnail   String?
  
  // YouTube integration
  youtubePlaylistId String? @unique
  autoSync          Boolean  @default(false)
  lastSyncedAt      DateTime?
  
  // Visibility
  isPublic    Boolean  @default(true)
  
  // Relations
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id], onDelete: SetNull)
  
  videos      Video[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([userId])
  @@index([categoryId])
  @@index([isPublic])
  @@index([youtubePlaylistId])
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  thumbnail   String?
  
  // Video URL (YouTube or custom)
  url         String
  youtubeId   String?
  
  // Duration in seconds
  duration    Int?
  
  // Order in playlist
  position    Int      @default(0)
  
  // Relations
  playlistId  String
  playlist    Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  
  progress    UserVideoProgress[]
  notes       Note[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@index([playlistId])
  @@index([youtubeId])
}

model UserVideoProgress {
  id              String   @id @default(cuid())
  
  // Relations
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  videoId         String
  video           Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  // Progress tracking
  completed       Boolean  @default(false)
  lastWatchedAt   DateTime @default(now())
  watchedDuration Int      @default(0) // in seconds
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
  @@index([completed])
}

model Note {
  id        String   @id @default(cuid())
  
  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  videoId   String
  video     Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)
  
  // Note content (Markdown)
  content   String   @db.Text
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@unique([userId, videoId])
  @@index([userId])
  @@index([videoId])
}
